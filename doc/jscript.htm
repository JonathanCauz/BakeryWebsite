<html>

<head>
<title>JScript</title>
</head>

<body>
<h1>JScript</h1>

<ul>
<li><a href='#HS'>HTML Scripting</a></li>
<li><a href='#C'>Comments</a></li>
<li><a href='#BT'>Built in types</a></li>
<li><a href='#OB'>Objects</a></li>
<li><a href='#V'>Variables</a></li>
<li><a href='#F'>Functions</a></li>
<li><a href='#S'>Statements</a></li>
<li><a href='#DOM'>DOM</a></li>
<li><a href='#R'>References</a></li>
</ul>

<hr/>
<h2 id=HS>HTML Scripting</h2>
<p>There are four places where you might use scripts:<p>
<ol>
<li>In the body tag of the page. In this case, the output of the script is displayed
is part of the HTML document when the browser loads the page. The JavaScript code must be placed inside one or more script tags.</li>
<li>In the head tag of the page. Scripts in the header are not executed immediately. They can
introduce symbols that can be referenced by other scripts. The JavaScript code must be placed inside one or more script tags.</li>
<li>Within an HTML tag. This is called an event handler. In this case, no script tag is needed to enclose the script.</li>
<li>In a separate file (typically with a .js extension). These files can be included in a 
script tag and their symbols can be referenced.</li>
</ol>
<p>The script tag is described <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script'>here</a>.</p>
<p>The most basic uses are:
<xmp>
<script>
 ... your script ...
</script>
</xmp>

<p>and</p>

<xmp>
<script src='myJavaScript.js'>
</script>
</xmp>

<hr/>
<h2 id='C'>Comments</h2>
<p>There are two types of comments:</p>
<p>Line comments:</p>
<pre>
// this is a line comment
a = a + 1 // this is anoth line comment
</pre>
<p>Block comments:</p>
<pre>
/* 
   this is a block comment
*/
</pre>

<hr/>
<h2 id='BT'>Built in types</h2>

<table cellspacing=0 border=1>
<tr><th>Name</th><th>Description</th><th>Values</th></tr>
<tr><td>Undefined</td><td>The Undefined type has exactly one value, called undefined. Any variable that has not been assigned a value has the value undefined.</td><td>undefined</td></tr>
<tr><td>Null</td><td>The Null type has exactly one value, called null.</td><td>null</td></tr>
<tr><td>Boolean</td><td>The Boolean type represents a logical entity having two values.</td><td>true and false</td></tr>
<tr><td>String</td><td>Orderd sequences of zero or more UTF-16 character values</td><td></td></tr>
<tr><td>Number</td><td>Floating point values.</td><td>1e10, NaN, Infinity</td></tr>
<tr><td>Symbol</td><td>The Symbol type is the set of all non-String values that may be used as the key of an Object property.</td><td>Symbol.hasInstance</td></tr>
</table>

<hr/>
<h2 id='OB'>Objects</h2>

<p>JavaScript supports three types of objects:</p>
<ol>
<li>Builtin-object types such as Array, String, Math, Date.</li>
<li>Browers objects from the DOM graph.</li>
<li>Custom objects created within the program.</li>
</ol>

<h3>Builtin (Global) Objects</h3>

<ul>
<li><a href='#B_A'>Array</a></li>
<li>ArrayBuffer</li>
<li>Boolean</li>
<li>DataView</li>
<li>Date</li>
<li>Error</li>
<li>Function</li>
<li>JSON</li>
<li>Map</li>
<li>Math</li>
<li>Number</li>
<li>Object</li>
<li>Promise</li>
<li>Proxy</li>
<li>Reflect</li>
<li>RegExp</li>
<li>Set</li>
<li>SharedArrayBuffer</li>
<li><a href='#B_Str'>String</a></li>
<li>Symbol</li>
</ul>

<h4 id=B_A>Array</h4>

<p>Create a new array:</p>
<pre>
	var scores = new Array(30);
</pre>
<p>Access the elements with:</p>
<pre>
	scores[0] = 39;
	scores[1] = 40;
	scores[2] = 42;
	scores[3] = 41;
	// ...
	s = scores[0];
</pre>
<p>Access the length of an array with:</p>
<pre>
	l = scores.length;
</pre>
<p>Sort the elements of an array with:</p>
<pre>
	sorted_scores = scores.sort();
</pre>

<h3 id=B_Str>String</h3>

<p>Strings can be created in two (equivalent ways):</p>
<pre>
test = "this is a test";
test = new String( "this is a test" );
</pre>
<p>Strings can be concatenated using the + operator:</p>
<pre>
test = test + ". And so is this";
test += ". Also this";
</pre>
<p>A string's length is returned by the length property:</p>
<pre>
document.write(test.length);
</pre>
<p>A string's case can be converted to upper (resp. lower):</p>
<pre>
document.write(test.toUpperCase());
document.write(test.toLowerCase());
</pre>
<p>A sub-string can be extracted from a string as following:</p>
<pre>
	alpha = "ABCEDEFGHIJKLMNOPQRSTUVWXYZ";
	//         substring( begin-index, end-index )
	ss = alpha.substring( 2 , 4 ); // ss == "CE"
	ss = alpha.substring( 8 , 8 ); // ss == ""
</pre>

<p>A single char can be extracted from a string as following:</p>
<pre>
	c = alpha.charAt(25); // c == "Z"
	c = alpha.charAt(26); // c == ""
</pre>

<p>Use the indexOf method to find a sub-string:</p>
<pre>
	i = alpha.indexOf("GHI");      // i == 7
	i = alpha.indexOf("GHI", 10 ); // Start searching at position 11. No match => i == -1
	i = alpha.lastIndexOf("GHI" ); // i == 7. Find last occurrance
</pre>

<hr/>
<h2 id='F'>Functions</h2>

<hr/>
<h2 id=V>Variables</h2>
<p>A variable can be created simply by an assignment statement:</p>
<pre>
i = 0;
</pre>
<p>Variables can also be declared with the var declarator, as in:</p>
<pre>
var i = 0;
</pre>
<h3>Scope</h3>
<p>The scope of a variable is the range of source where it can be referenced. Scopes are:</p>
<ul>
<li>Global: A variable declared outside of a function has global scope. It can be referenced 
anywhere in the loaded scopes. It is a good practice to declare global variables in the head of 
an HTML document.</li>
<li>Function: A variable declared with the var keyword within a function has function scope. It
can be refereneced within the function.</li>
<li>Block: A variable declared with the const or let keywords within the block of a function has block scope. It can only be referenced within the block. A variable declared with const is a constant. ie. Its value cannot be changed once it is initialized.</li>
</ul>
<p>If a variable is declared in a scope and this scope is nested within a larger scope in which a 
variable with the same name is declared, then the variable in the inner scope hides the 
variable in the enclosing scope. For example:
</p>
<pre>
var x = 1;	// Enclosing scope definition

function foo()
{
	var x = 2; // Inner scope
	// ...
	x = 3; // This is the Inner scope x
}

foo();

document.write( "x = " + x ); // x = 1
</pre>

<hr/>
<h2 id='S'>Statements</h2>

<p>The standard branching statements are supported:</p>

<ul>
<li>if .. else</li>
<li>while</li>
<li>for</li>
<li>do .. while</li>
<li>switch / case / default / break</li>
</ul>

<h3>with</h3>
<p>The with statement allows unqualified access to the members of an object. For example,</p>
<pre>
with(string_ob)
{
	window.alert( length );	// string_ob.length
	toUpperCase();          // string_ob.toUpperCase()
}
</pre>

<h3>Condition</h3>
<p>The standard comparision operators ==, !=, <, >, <= and >= can be used to compare values.</p>
<p>The operator === and !== comparses the type and value.</p>
<p>Connectors && and || can be used, with the standard semantics.</p>
<p>The not operator ! can be used to toggle the value of a logical expression.</p>
<p>The conditional expression is</p>
<pre>
value = condition ? true-value : false-value;
</pre>

<hr/>
<h2 id='DOM'>DOM</h2>

<h3>window functions</h3>

<table cellspacing=0 border=1>
<tr><th>Function</th><th>Description</th><th>Example</th></tr>

<tr><td>alert</td><td>Causes a dialog to be displayed</td><td>
window.alert( message );
</td></tr>

<tr><td>setTimeout</td><td>Call the specified function after the specified timeout</td><td>
<pre>
window.setTimeout( "ScrollMessage()", 100 );
</pre>
</td></tr>

</table>

<hr/>
<h2 id=R>References</h2>
<ul>
<li href='https://en.wikipedia.org/wiki/ECMAScript'>Wiki ECMAScript</a></li>
<li href='http://www.ecma-international.org/ecma-262/9.0/index.html'>ECMAScript 2018</a></li>
<ul>

</body>

</html>
